#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('proyecto:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var path = require('path');
const SocketServer = require('ws').Server;
const streamCtrl = require('../app_server/controllers/streamCtrl');
const herokuSettings = require('../app_server/conf/herokuSettings');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');

app.set('port', port);

/**
 * Create HTTPS server.
 */
var cert = path.join(__dirname,'..','app_server','conf','.sslcert','local','localhost.crt');
var key = path.join(__dirname,'..','app_server','conf','.sslcert','local','localhost.key');

const httpsOptions = {
  cert: fs.readFileSync(cert),
  key: fs.readFileSync(key)
};

var serverhttps = https.createServer(httpsOptions,app);
serverhttps.listen(3003);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
//Servidor websockets
if(herokuSettings.entorno==="local") {
  var io = require('socket.io')(serverhttps);
  io.on('connection', function (socket) {
    console.log('connected');
    socket.on('start', function (msg) {
      console.log(msg)
      streamCtrl.open(socket, msg);
    });
  });
}else {
  var io = require('socket.io').listen(http);
  console.log('heroku sockets');
  console.log(io);
  io.on('connection', function (socket) {
    console.log('connected');
    socket.on('start', function (msg) {
      console.log(msg)
      streamCtrl.open(socket, msg);
    });
  });
}
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  console.log('Listening on ' + bind);
}

